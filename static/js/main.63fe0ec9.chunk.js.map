{"version":3,"sources":["products/card-product.js","layout/toolbar.js","App.js","serviceWorker.js","index.js"],"names":["Products","react_default","a","createElement","id","title","description","imageUrl","map","el","shards_react_es","src","Toolbar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggleDropdown","bind","assertThisInitialized","toggleNavbar","state","dropdownOpen","collapseOpen","setState","objectSpread","type","theme","expand","react_router_dom","to","style","color","onClick","open","navbar","active","href","disabled","toggle","nav","caret","className","size","seamless","react_fontawesome_index_es","icon","faSearch","placeholder","React","Component","App","layout_toolbar","react_router","exact","path","component","Boolean","window","location","hostname","match","render","src_App","document","querySelector"],"mappings":"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","file":"static/js/main.63fe0ec9.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Card, CardTitle, CardImg, CardBody, Button } from \"shards-react\";\r\nimport \"./card-product.css\";\r\n\r\nexport default function Products() {\r\n  var responseFromBackend = [\r\n    {\r\n      title: \"product1\",\r\n      description: \"Description lorem 1\",\r\n      imageUrl: \"\"\r\n    },\r\n    {\r\n      title: \"product2\",\r\n      description: \"Description lorem 2\",\r\n      imageUrl: \"\"\r\n    },\r\n    {\r\n      title: \"product3\",\r\n      description: \"Description lorem 3\",\r\n      imageUrl: \"\"\r\n    },\r\n    {\r\n      title: \"product4\",\r\n      description: \"Description lorem 4\",\r\n      imageUrl: \"\"\r\n    }\r\n  ];\r\n  return (\r\n    <div>\r\n      <div id=\"container\">\r\n        {responseFromBackend.map(el => (\r\n          <Card id=\"cards\">\r\n            <CardImg src=\"https://place-hold.it/300x200\" />\r\n            <CardBody>\r\n              <CardTitle>{el.title}</CardTitle>\r\n              <p>{el.description}</p>\r\n              <Button>More &rarr;</Button>\r\n            </CardBody>\r\n          </Card>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { faSearch } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"shards-ui/dist/css/shards.min.css\";\r\nimport {\r\n  Navbar,\r\n  NavbarToggler,\r\n  NavbarBrand,\r\n  Nav,\r\n  NavItem,\r\n  NavLink,\r\n  Dropdown,\r\n  DropdownToggle,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  InputGroup,\r\n  InputGroupAddon,\r\n  InputGroupText,\r\n  FormInput,\r\n  Collapse\r\n} from \"shards-react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport \"./toolbar.css\";\r\n\r\nclass Toolbar extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.toggleDropdown = this.toggleDropdown.bind(this);\r\n    this.toggleNavbar = this.toggleNavbar.bind(this);\r\n\r\n    this.state = {\r\n      dropdownOpen: false,\r\n      collapseOpen: false\r\n    };\r\n  }\r\n\r\n  toggleDropdown() {\r\n    this.setState({\r\n      ...this.state,\r\n      ...{\r\n        dropdownOpen: !this.state.dropdownOpen\r\n      }\r\n    });\r\n  }\r\n\r\n  toggleNavbar() {\r\n    this.setState({\r\n      ...this.state,\r\n      ...{\r\n        collapseOpen: !this.state.collapseOpen\r\n      }\r\n    });\r\n  }\r\n  render() {\r\n    return (\r\n      <div id=\"layout\">\r\n        <Navbar type=\"dark\" theme=\"primary\" expand=\"md\">\r\n          <NavbarBrand>\r\n            <Link to=\"/\" style={{ color: \"white\" }}>\r\n              Odiazon\r\n            </Link>\r\n          </NavbarBrand>\r\n          <NavbarToggler onClick={this.toggleNavbar} />\r\n\r\n          <Collapse open={this.state.collapseOpen} navbar>\r\n            <Nav navbar>\r\n              <NavItem>\r\n                {/*<NavLink active href=\"#\">\r\n                  Active\r\n                </NavLink>*/}\r\n                <NavLink active>\r\n                  <Link to=\"/products\" style={{ color: \"white\" }}>\r\n                    View All Products\r\n                  </Link>\r\n                </NavLink>\r\n              </NavItem>\r\n              <NavItem>\r\n                <NavLink href=\"#\" disabled>\r\n                  {\" \"}\r\n                </NavLink>\r\n              </NavItem>\r\n              <Dropdown\r\n                open={this.state.dropdownOpen}\r\n                toggle={this.toggleDropdown}\r\n              >\r\n                <DropdownToggle nav caret>\r\n                  Dropdown\r\n                </DropdownToggle>\r\n                <DropdownMenu>\r\n                  <DropdownItem>Action</DropdownItem>\r\n                  <DropdownItem>Another action</DropdownItem>\r\n                  <DropdownItem>Something else here</DropdownItem>\r\n                </DropdownMenu>\r\n              </Dropdown>\r\n            </Nav>\r\n\r\n            <Nav navbar className=\"ml-auto\">\r\n              <InputGroup size=\"sm\" seamless>\r\n                <InputGroupAddon type=\"prepend\">\r\n                  <InputGroupText>\r\n                    <FontAwesomeIcon icon={faSearch} />\r\n                  </InputGroupText>\r\n                </InputGroupAddon>\r\n                <FormInput className=\"border-0\" placeholder=\"Search...\" />\r\n              </InputGroup>\r\n            </Nav>\r\n          </Collapse>\r\n        </Navbar>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Toolbar;\r\n","import React from \"react\";\n\nimport { Route, Switch } from \"react-router-dom\";\nimport HomePage from \"./homepage/homepage.js\";\nimport Products from \"./products/card-product\";\nimport Toolbar from \"./layout/toolbar.js\";\n\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div>\n      <Toolbar />\n      <Switch>\n        <Route exact path=\"/\" component={Products} />\n        <Route exact path=\"/products\" component={Products} />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n\n//       <Route path=\"/:id\" component={UserPage} /> <Route exact path=\"/products\" component={HomePage} /> <Route exact path=\"/\" component={HomePage} />\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { render } from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\n\n/*ReactDOM.render(\n<App />, document.getElementById('root'));*/\nrender(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.querySelector(\"#root\")\n);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n"],"sourceRoot":""}